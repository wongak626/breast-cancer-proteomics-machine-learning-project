multiple_reg_MasterFrame[["Gln"]][1]
multiple_reg_MasterFrame[["Gln"]][2]
multiple_reg_MasterFrame[["Gln"]][3]
multiple_reg_MasterFrame[["Gln"]][4]
multiple_reg_MasterFrame[["Gln"]][5]
multiple_reg_MasterFrame[["Gln"]][4]
multiple_reg_MasterFrame[["Gln"]][4][,5]
multiple_reg_MasterFrame[["Gln"]][4][5]
multiple_reg_MasterFrame[["Gln"]][4][4]
multiple_reg_MasterFrame[["Gln"]][4][3]
multiple_reg_MasterFrame[["Gln"]][4][1]
multiple_reg_MasterFrame[["Gln"]][4][2]
sapply(multiple_reg_MasterFrame, "[[", 1)
sapply(multiple_reg_MasterFrame, "[[", 2)
sapply(multiple_reg_MasterFrame, "[[", 3)
sapply(multiple_reg_MasterFrame, "[[", 4)
sapply(multiple_reg_MasterFrame, "[[", 5)
sapply(multiple_reg_MasterFrame, "[[", 6)
sapply(multiple_reg_MasterFrame, "[[", 7)
sapply(multiple_reg_MasterFrame, "[[", 8)
sapply(multiple_reg_MasterFrame, "[[", 10)
sapply(multiple_reg_MasterFrame, "[[", "H1")
sapply(multiple_reg_MasterFrame, "[[", 4)
sapply(multiple_reg_MasterFrame, "[[", 6)
sapply(multiple_reg_MasterFrame, "[[", "Gln")
sapply(multiple_reg_MasterFrame, "[[", 1)
sapply(multiple_reg_MasterFrame, "[[", 2)
sapply(multiple_reg_MasterFrame, "[[", 3)
sapply(multiple_reg_MasterFrame, "[[", 4)
sapply(multiple_reg_MasterFrame, "[[", 4)
sapply(multiple_reg_MasterFrame, "[[", 5)
multiple_reg_MasterFrame[["Gln"]][4]
p_value_coefficient <- function(x){
y <- multiple_reg_MasterFrame[[x]][4]
return y
}
p_value_coefficient <- function(x){
y <- multiple_reg_MasterFrame[[x]][4]
return (y)
}
p_value_estimates <- sapply(colnames(metabolites), p_value_coefficeint,
simplify = F, USE.NAMES = T)
p_value_estimates <- sapply(colnames(metabolites), p_value_coefficient,
simplify = F, USE.NAMES = T)
p_value_estimates
sapply(p_value_coefficient, "[[", 1)
sapply(listJson, "[[", 2)
sapply(p_value_estimates, "[[", 1)
sapply(listJson, "[[", 2)
sapply(p_value_estimates, "[[", 2)
sapply(p_value_estimates, "[[", 3)
p_vaue_estimates
p_value_estimates
multiple_reg <- function(x){
y <- MasterFrame[,x]
return(coef(lm(y ~ MasterFrame$sex + MasterFrame$age + MasterFrame$hgb_a1c + MasterFrame$LDL.particle)))
}
multiple_reg_MasterFrame <- sapply(colnames(metabolites), multiple_reg,
simplify = F, USE.NAMES = T)
multiple_reg_MasterFrame
multiple_reg_MasterFrame[["Gln"]][1]
multiple_reg_MasterFrame[["Gln"]][2]
multiple_reg_MasterFrame[["Gln"]]
multiple_reg_MasterFrame[["Gln"]][3]
matrix_test <- matrix(c(multiple_reg_MasterFrame[["Gln"]]), nrow = 1, ncol = 4)
matrix_test <- matrix(c(multiple_reg_MasterFrame[["Gln"]][2:5]), nrow = 1, ncol = 4)
matrix_test
t(sapply(colnames(metabolites), function(n)c(multiple_reg_MasterFrame[[n]][2:5])))
multiple_reg_MasterFrame
multiple_reg <- function(x){
y <- MasterFrame[,x]
return(coef(summary(lm(y ~ MasterFrame$sex + MasterFrame$age + MasterFrame$hgb_a1c + MasterFrame$LDL.particle))))
}
multiple_reg_MasterFrame <- sapply(colnames(metabolites), multiple_reg,
simplify = F, USE.NAMES = T)
multiple_reg_MasterFrame
multiple_reg_MasterFrame[["Gln"]][1]
multiple_reg_MasterFrame[["Gln"]][2]
multiple_reg_MasterFrame[["H1"]][2]
multiple_reg_MasterFrame[["H1"]][1]
multiple_reg_MasterFrame[["H1"]][6]
multiple_reg_MasterFrame[["H1"]][16]
multiple_reg_MasterFrame[["H1"]][16:20]
t(sapply(colnames(metabolites), function(n)c(multiple_reg_MasterFrame[[n]][16:20])))
t(sapply(colnames(metabolites), function(n)c(multiple_reg_MasterFrame[[n]][2:5])))
Matrix_coeff
Matrix_coeff <- t(sapply(colnames(metabolites), function(n)c(multiple_reg_MasterFrame[[n]][2:5])))
Matrix_coeff
colnames(Matrix_coeff) <- c('MasterFrame$sex','MasterFrame$age','MasterFrame$hgb_a1c','MasterFrame$LDL.particle')
Matrix_coeff
matrix_p_value <- t(sapply(colnames(metabolites), function(n)c(multiple_reg_MasterFrame[[n]][16:20])))
matrix_p_value
colnames(matrix_p_value) <- c('MasterFrame$sex','MasterFrame$age','MasterFrame$hgb_a1c','MasterFrame$LDL.particle')
multiple_reg_MasterFrame[["H1"]][16:20]
multiple_reg_MasterFrame[["Gln"]]
MasterFrame <- MasterFrame[!(MasterFrame$LDL.particle == 60 | MasterFrame$LDL.particle == 90),]
nrow(MasterFrame)
head(MasterFrame)
count(MasterFrame$Diab == "Yes")
nrow(MasterFrame$Diab == "Yes")
MasterFrame$Diab == "Yes"
which(MasterFrame$Diab == "Yes")
count(which(MasterFrame$Diab == "Yes"))
length(which(MasterFrame$Diab == "Yes"))
length(which(MasterFrame$Diab == "No"))
metabolites <- MasterFrame[,2:179]
multiple_reg <- function(x){
y <- MasterFrame[,x]
return(coef(summary(lm(y ~ MasterFrame$sex + MasterFrame$age + MasterFrame$hgb_a1c +
MasterFrame$LDL.particle))))
}
multiple_reg_MasterFrame <- sapply(colnames(metabolites), multiple_reg,
simplify = F, USE.NAMES = T)
matrix_coefficients <- t(sapply(colnames(metabolites),
function(n)c(multiple_reg_MasterFrame[[n]][2:5])))
matrix_p_value <- t(sapply(colnames(metabolites),
function(n)c(multiple_reg_MasterFrame[[n]][17:20])))
length(which(p_value_adj_hgb_a1c <= 0.1))
p_value_adj_hgb_a1c <- p.adjust(matrix_p_value[,3], "BH")
length(which(p_value_adj_hgb_a1c <= 0.1))
multiple_reg <- function(x){
y <- MasterFrame[,x]
return(coef(summary(lm(y ~ MasterFrame$sex + MasterFrame$age + MasterFrame$hgb_a1c + MasterFrame$apoB.mg.dl))))
}
multiple_reg_MasterFrame <- sapply(colnames(metabolites), multiple_reg,
simplify = F, USE.NAMES = T)
multiple_reg_MasterFrame <- sapply(colnames(metabolites), multiple_reg,
simplify = F, USE.NAMES = T)
multiple_reg <- function(x){
y <- MasterFrame[,x]
return(coef(summary(lm(y ~ MasterFrame$sex + MasterFrame$age + MasterFrame$hgb_a1c + MasterFrame$apoB.mg.dl))))
}
multiple_reg_MasterFrame <- sapply(colnames(metabolites), multiple_reg,
simplify = F, USE.NAMES = T)
metabolites <- MasterFrame[,2:179]
multiple_reg <- function(x){
y <- MasterFrame[,x]
return(coef(summary(lm(y ~ MasterFrame$sex + MasterFrame$age + MasterFrame$hgb_a1c + MasterFrame$apoB.mg.dl))))
}
multiple_reg_MasterFrame <- sapply(colnames(metabolites), multiple_reg,
simplify = F, USE.NAMES = T)
multiple_reg_MasterFrame <- sapply(colnames(metabolites), multiple_reg,
simplify = F, USE.NAMES = T)
multiple_reg <- function(x){
y <- MasterFrame[,x]
return(coef(summary(lm(y ~ MasterFrame$sex + MasterFrame$age + MasterFrame$hgb_a1c + MasterFrame$apoB.mg.dl))))
}
multiple_reg_MasterFrame <- sapply(colnames(metabolites), multiple_reg,
simplify = F, USE.NAMES = T)
multiple_reg <- function(x){
y <- MasterFrame[,x]
return(coef(summary(lm(y ~ MasterFrame$sex + MasterFrame$age + MasterFrame$hgb_a1c + MasterFrame$apoB.mg.dl))))}
multiple_reg_MasterFrame <- sapply(colnames(metabolites), multiple_reg,
simplify = F, USE.NAMES = T)
multiple_reg <- function(x){
y <- MasterFrame[,x]
return(coef(summary(lm(y ~ MasterFrame$sex + MasterFrame$age + MasterFrame$hgb_a1c +
MasterFrame$apoB.mg.dl))))
}
multiple_reg_MasterFrame <- sapply(colnames(metabolites), multiple_reg,
simplify = F, USE.NAMES = T)
multiple_reg <- function(x){
y <- MasterFrame[,x]
return(coef(summary(lm(y ~ MasterFrame$sex + MasterFrame$age + MasterFrame$hgb_a1c +
MasterFrame$LDL.particle))))
}
multiple_reg_MasterFrame <- sapply(colnames(metabolites), multiple_reg,
simplify = F, USE.NAMES = T)
multiple_reg <- function(x){
y <- MasterFrame[,x]
return(coef(summary(lm(y ~ MasterFrame$sex + MasterFrame$age + MasterFrame$hgb_a1c +
MasterFrame$apoB.mg.dl))))
}
multiple_reg_MasterFrame <- sapply(colnames(metabolites), multiple_reg,
simplify = F, USE.NAMES = T)
metabolites
multiple_reg <- function(x){
y <- MasterFrame[,x]
return(coef(summary(lm(y ~ MasterFrame$sex + MasterFrame$age + MasterFrame$hgb_a1c +
MasterFrame$apoB.mg.dl))))
}
multiple_reg_MasterFrame <- sapply(colnames(metabolites), multiple_reg,
simplify = F, USE.NAMES = T)
multiple_reg <- function(x){
y <- MasterFrame[,x]
return(coef(summary(lm(y ~ MasterFrame$sex + MasterFrame$age + MasterFrame$Diab + MasterFrame$apoB.mg.dl))))
}
multiple_reg_MasterFrame <- sapply(colnames(metabolites), multiple_reg,
simplify = F, USE.NAMES = T)
head(MasterFrame)
load("~/Desktop/objects/MergedData.RData")
load("~/Desktop/objects/MergedData.RData")
head(MasterFrame)
metabolites <- MasterFrame[,2:179]
multiple_reg <- function(x){
y <- MasterFrame[,x]
return(coef(summary(lm(y ~ MasterFrame$sex + MasterFrame$age + MasterFrame$hgb_a1c +
MasterFrame$apoB.mg.dl))))
}
multiple_reg_MasterFrame <- sapply(colnames(metabolites), multiple_reg,
simplify = F, USE.NAMES = T)
matrix_coefficients <- t(sapply(colnames(metabolites),
function(n)c(multiple_reg_MasterFrame[[n]][2:5])))
matrix_p_value <- t(sapply(colnames(metabolites),
function(n)c(multiple_reg_MasterFrame[[n]][17:20])))
p_value_adj_hgb_a1c <- p.adjust(matrix_p_value[,3], "BH")
length(which(p_value_adj_hgb_a1c <= 0.1))
multiple_reg <- function(x){
y <- MasterFrame[,x]
return(coef(summary(lm(y ~ MasterFrame$sex + MasterFrame$age + MasterFrame$Diab + MasterFrame$apoB.mg.dl))))
}
multiple_reg_MasterFrame <- sapply(colnames(metabolites), multiple_reg,
simplify = F, USE.NAMES = T)
matrix_coefficients <- t(sapply(colnames(metabolites),
function(n)c(multiple_reg_MasterFrame[[n]][2:5])))
matrix_p_value <- t(sapply(colnames(metabolites),
function(n)c(multiple_reg_MasterFrame[[n]][17:20])))
p_value_adj_Diab <- p.adjust(matrix_p_value[,3], "BH")
length(which(p_value_adj_Diab <= 0.1))
multiple_reg <- function(x){
y <- MasterFrame[,x]
return(coef(summary(lm(y ~ MasterFrame$sex + MasterFrame$age + MasterFrame$Diab + MasterFrame$LDL.particle))))
}
multiple_reg_MasterFrame <- sapply(colnames(metabolites), multiple_reg,
simplify = F, USE.NAMES = T)
matrix_coefficients <- t(sapply(colnames(metabolites),
function(n)c(multiple_reg_MasterFrame[[n]][2:5])))
matrix_p_value <- t(sapply(colnames(metabolites),
function(n)c(multiple_reg_MasterFrame[[n]][17:20])))
p_value_adj_Diab <- p.adjust(matrix_p_value[,3],"BH")
length(which(p_value_adj_Diab <= 0.1))
length(which(MasterFrame$Diab == "No"))
length(which(MasterFrame$Diab == "Yes"))
Diabetic_MasterFrame <- filter(MasterFrame, Diab == "Yes")
head(MasterFrame)
library(dplyr)
Diabetic_MasterFrame <- filter(MasterFrame, Diab == "Yes")
length(which(Diabetic_MasterFrame$sex == "Female"))
head(Diabetic_MasterFrame)
length(which(Diabetic_MasterFrame$sex == "female"))
length(which(Diabetic_MasterFrame$sex == "male"))
control_MasterFrame <- filter(MasterFrame, Diab == "No")
length(which(control_MasterFrame$sex == "female"))
mean(Diabetic_MasterFrame$age)
mean(control_MasterFrame$age)
mean(Diabetic_MasterFrame$LDLp)
head(Diabetic_MasterFrame)
mean(Diabetic_MasterFrame$LDL.particle)
mean(control_MasterFrame$LDL.particle)
mean(Diabetic_MasterFrame$apoB.mg.dl)
mean(Diabetic_MasterFrame$Hgb_a1c)
mean(Diabetic_MasterFrame$apoB.mg.dl)
mean(control_MasterFrame$apoB.mg.dl)
mean(Diabetic_MasterFrame$apoB.mg.dl)
mean(Diabetic_MasterFrame$hgb_a1c)
mean(control_MasterFrame$hgb_a1c)
min(Diabetic_MasterFrame$age)
max(Diabetic_MasterFrame$age)
min(control_MasterFrame$age)
max(control_MasterFrame$age)
min(Diabetic_MasterFrame$LDL.particle)
max(Diabetic_MasterFrame$LDL.particle)
min(control_MasterFrame$LDL.particle)
max(control_MasterFrame$LDL.particle)
min(Diabetic_MasterFrame$apoB.mg.dl)
max(Diabetic_MasterFrame$apoB.mg.dl)
min(control_MasterFrame$apoB.mg.dl)
max(control_MasterFrame$apoB.mg.dl)
min(Diabetic_MasterFrame$hgb_a1c)
max(Diabetic_MasterFrame$hgb_a1c)
min(control_MasterFrame$hgb_a1c)
max(control_MasterFrame$hgb_a1c)
log.MasterFrame <- MasterFrame[,2:179]
MasterFrame.pca <- prcomp(log.MasterFrame,
center = TRUE,
scale. = TRUE)
PC1_info <- select(MasterFrame, PatientID, age, Diab, sex, LDL.particle, Total.cholesterol)
select_PC <- function(x){
return (PC1_info[x,])
}
PC1_selection <- lapply(which(MasterFrame.pca[["x"]][,"PC1"] > 10), select_PC)
print(PC1_selection)
PC1_info <- select(MasterFrame, PatientID, age, Diab, sex, LDL.particle, apoB.mg.dl, hgb_a1c)
print(PC1_selection)
select_PC <- function(x){
return (PC1_info[x,])
}
PC1_selection <- lapply(which(MasterFrame.pca[["x"]][,"PC1"] > 10), select_PC)
print(PC1_selection)
metabolites <- MasterFrame[,2:179]
multiple_reg <- function(x){
y <- MasterFrame[,x]
return(coef(summary(lm(y ~ MasterFrame$sex + MasterFrame$age + MasterFrame$hgb_a1c +
MasterFrame$apoB.mg.dl))))
}
multiple_reg_MasterFrame <- sapply(colnames(metabolites), multiple_reg,
simplify = F, USE.NAMES = T)
matrix_coefficients <- t(sapply(colnames(metabolites),
function(n)c(multiple_reg_MasterFrame[[n]][2:5])))
matrix_p_value <- t(sapply(colnames(metabolites),
function(n)c(multiple_reg_MasterFrame[[n]][17:20])))
p_value_adj_hgb_a1c <- p.adjust(matrix_p_value[,3], "BH")
p_value_adj_Apob <- p.adjust(matrix_p_value[,4],"BH")
which(p_value_adj_hgb_a1c <= 0.1)
p_value_adj_hgb_a1c
p_value_adj_hgb_a1c[which(p_value_adj_hgb_a1c <= 0.1)]
p_value_adj_Apob[which(p_value_adj_ApoB <= 0.1)]
p_value_adj_Apob <- p.adjust(matrix_p_value[,4],"BH")
p_value_adj_Apob[which(p_value_adj_ApoB <= 0.1)]
p_value_adj_Apob[which(p_value_adj_Apob <= 0.1)]
p_value_adj_Apob[which(p_value_adj_Apob <= 0.05)]
p_value_adj_Apob[which(p_value_adj_Apob <= 0.05)]
p_value_adj_hgb_a1c[which(p_value_adj_hgb_a1c <= 0.05)]
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
newCSV <- read.csv("/Users/Alex/Downloads/Metro_Bus_Stops.csv", header = TRUE)
newCSV <- read.csv("/Users/Alex/Downloads/Metro_Bus_Stops.csv", header = TRUE)
View(newCSV)
library(downloader)
install.packages(downloader)
install.packages("downloader")
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleMiceWeights.csv"
filename <- "femaleNiceWeights.csv"
download(url, destfile=filename)
library("downloader", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
download(url, destfile=filename)
dat <- read.csv(filename)
library(tissuesGeneExpression)
data(tissueGeneExpression)
library("rafalib", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(tissuesGeneExpression)
data(tissueGeneExpression)
install.packages("tissuesGeneExpression")
library(devtools)
library(tissuesGeneExpression)
install.packages("genomicsclass/tissuesGeneExpression")
install_github("genomicsclass/tissuesGeneExpression")
library(tissuesGeneExpression)
data(tissuesGeneExpression)
table(tissue)
x <- e[,1]
sqrt(sum((x-y)^2))
x <- e[,1]
y <- e[,2]
z <- e[,87]
sqrt(sum((x-y)^2))
sqrt(sum((x-z)^2))
sqrt(crossprod(x-y))
sqrt(crossprod(x-z))
dist(t(e))
d <- dist(t(e))
library(rafalib)
library(MASS)
dim(z)
data(tissuesGeneExpression)
colind <- tissues %in% c("kidney", "colon", "liver")
colind <- tissue %in% c("kidney", "colon", "liver")
mat <- e[,colind]
ftissue <- factor(tissue[colind])
dim(mat)
s <- svd(mat - rowMeans(mat))
z <- diag(s$d[1:2]) %*% t(s$v[,1:2])
dim(z)
library(rafalib)
mypar2(1,1)
mypar2(1,1)
plot(z)
z <- t(z)
plot(z)
mypar2(1,1)
plot(z)
mypar(1,1)
plot(z)
plot(PC1,PC2,pch=21,bg=as.numeric(group))
plot(mds[,1],mds[,2],bg=as.numeric(group),pch=21,
xlab="First dimension",ylab="Second dimension")
legend("bottomleft",levels(group),col=seq(along=levels(group)),pch=15)
d <- dist(t(mat))
mds <- cmdscale(d)
mypar(1,1)
plot(mds[,1],mds[,2],bg=as.numeric(group),pch=21,
xlab="First dimension",ylab="Second dimension")
legend("bottomleft",levels(group),col=seq(along=levels(group)),pch=15)
library(tissuesGeneExpression)
data(tissueGeneExpression)
data(tissuesGeneExpression)
d <- dist(t(e))
View(e)
library(rafalib)
mypar(1,1)
myplclust(hc, cex = 0.5, labe=tissue,
lab.col=as.fumeric(tissue))
hc <- hclust(d)
class(hc)
mypar(1,1)
myplclust(hc, cex = 0.5, labe=tissue,
lab.col=as.fumeric(tissue))
abline(h=120)
cl = cutree(hc,h=120)
table(true=tissue,cluster=cl)
d
cl
head(e)
d <- dist(t(e))
mds <- cmdscale(d)
plot(mds[,1],mds[,2], col=km$cluster)
mds <- cmdscale(d)
km <- kmeans(t(e), centers = 7)
table(tissue, clusters = km$cluster)
km <- kmeans(t(e), centers = 7)
table(tissue, clusters = km$cluster)
km <- kmeans(t(e), centers = 7)
table(tissue, clusters = km$cluster)
?heatmap
library(gplots)
library(rafalib)
cols <- palette(brewer.pal(7,"Dark2"))[as.fumeric(tissue)]
cols <- palette(brewer.pal(7,"Dark2"))[as.fumeric(tissue)]
?brewer.pal
library(RColorBrewer)
hmcol <- colorRampPalette(brewer, pal(9, "GnBul"))(100)
?pal
hmcol <- colorRampPalette(brewer.pal(9, "GnBul"))(100)
hmcol <- colorRampPalette(brewer.pal(9, "GnBu"))(100)
heatmap(e[idx,],col=hmcol)
library(tissuesGeneExpression)
data(tissuesGeneExpression)
library(genefilter)
rv <- rowVars(e)
rv
head(rv)
idx <- order(-rv)[1:40]
idx
heatmap(e[idx,],col=hmcol)
library(gplots)
library(rafalib)
cols <- palette(brewer.pal(7,"Dark2"))[as.fumeric(tissue)]
cbind(colnames(e), cols)
heatmap.2(e[idx,], labCol=tissue,
trace="none",
ColSideColors = cols,
col=hmcol)
library(tissuesGeneExpression)
data(tissuesGeneExpression)
table(tissue)
ind <- which(tissue != "placenta")
y <- tissue[ind]
X <- t(e[,ind])
dim(X)
length(y)
set.seed(1)
idx <- createFolds(y, k = 5)
library(caret)
install.packages("caret")
install.packages("caret")
data(admissions)
data(admissions)
library(dagdata)
data(admissions)
admissions$total=admissions$Percent * admissions$Number/100
data(admissions)
View(admissions)
43/log(43)
44/log(44)
50/log(50)
70/log(70)
64/4
69/log69
69/log(69)
68/log(68)
67/log(67)
-1780 + 530.9 * 1
-569.6 + -530.9 * 1
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("impute", version = "3.8")
install.packages("BiocManager")
version
setwd("~/Downloads/breast_cancer_proteomics")
library(limma)
library(qvalue)
library(impute)
eb.fit <- function(dat, design){
n <- dim(dat)[1]
fit <- lmFit(dat, design)
fit.eb <- eBayes(fit)
log2FC <- fit.eb$coefficients[, 2]
df.r <- fit.eb$df.residual
df.0 <- rep(fit.eb$df.prior, n)
s2.0 <- rep(fit.eb$s2.prior, n)
s2 <- (fit.eb$sigma)^2
s2.post <- fit.eb$s2.post
t.ord <- fit.eb$coefficients[, 2]/fit.eb$sigma/fit.eb$stdev.unscaled[, 2]
t.mod <- fit.eb$t[, 2]
p.ord <- 2*pt(-abs(t.ord), fit.eb$df.residual)
p.mod <- fit.eb$p.value[, 2]
q.ord <- qvalue(p.ord)$q
q.mod <- qvalue(p.mod)$q
results.eb <- data.frame(log2FC, t.ord, t.mod, p.ord, p.mod, q.ord, q.mod, df.r, df.0, s2.0, s2, s2.post)
results.eb <- results.eb[order(results.eb$p.mod), ]
return(results.eb)
}
dat <- read.csv("77_cancer_proteomes_CPTAC_itraq.csv")
rownames(dat) <- dat$RefSeq_accession_number
cha <- colnames(dat)[4:length(dat)]
dat <- subset(dat, !apply(dat[cha], 1, f <- function(x) any(is.na(x))))
par(mfrow=c(1,1), font.lab=2, cex.lab=1.2, font.axis=2, cex.axis=1.2)
boxplot(dat[, 4:length(cha)], ylim = c(-3, 3),main="Boxplot normalized Intensities")
plot(mtcars)
dev.off()
plot(mtcars)
dev.cur()
dev.off(1)
